@page "/fetchdata"
@inject IJSRuntime JSRuntime
@inject IWeatherForecastService service

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (currentItem == null)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => Edit(forecast)">Edit</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <EditForm Model="@currentItem" >
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Date</label>
                <InputDate @bind-Value="currentItem.Date"></InputDate>
                <ValidationMessage For="@(() =>currentItem.Date)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label>Temp. (C)</label>
                <InputNumber @bind-Value="currentItem.TemperatureC"></InputNumber>
                <ValidationMessage For="@(() =>currentItem.TemperatureC)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label>Summary</label>
                <InputText @bind-Value="currentItem.Summary"></InputText>
                <ValidationMessage For="@(() =>currentItem.TemperatureC)"></ValidationMessage>
            </div>
            <button type="button" @onclick="GoBack" >Go Back</button>
        </EditForm>
    }
}

@code {
    private List<WeatherForecast> forecasts;
    private WeatherForecast currentItem;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await service.Get();
    }

    public void Edit(WeatherForecast item)
    {
        currentItem = item;
    }

    public async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("alert", "modifica effettuata");
        currentItem =null;
    }
}
